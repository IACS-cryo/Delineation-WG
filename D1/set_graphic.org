
#+PROPERTY: header-args:jupyter-python+ :dir (file-name-directory buffer-file-name) :session IDWG

* Table of contents                               :toc_2:noexport:
- [[#introduction][Introduction]]
- [[#greenland][Greenland]]
  - [[#setup][Setup]]
  - [[#products][Products]]
  - [[#places][Places]]
  - [[#overlap][Overlap]]
  - [[#sets][Sets]]
  - [[#union][Union]]
  - [[#share][Share]]
- [[#antarctica][Antarctica]]
  - [[#setup-1][Setup]]
  - [[#products-1][Products]]
  - [[#overlap-1][Overlap]]
  - [[#sets-1][Sets]]
  - [[#share-1][Share]]

* Introduction

Workbook to create set difference graphic

* Greenland

** Setup

#+BEGIN_SRC bash :exports both :results verbatim
grass -c EPSG:3413 ./G_GL
mkdir -p tmp dat
#+END_SRC

** Products
*** RGI 7.0

#+BEGIN_SRC bash :exports both :results verbatim
g.mapset -c RGI
v.import input=${DATADIR}/RGI/7.0/regional_files/RGI2000-v7.0-G/RGI2000-v7.0-G-05_greenland_periphery.shp output=RGI
# v.db.select map=RGI|head -n2
g.region vector=RGI res=100 -pa
v.to.rast input=RGI output=mask use=val val=1
r.mapcalc "m_RGI = if(mask)"
#+END_SRC


*** BedMachine v5

#+BEGIN_SRC bash :exports both :results verbatim
g.mapset -c BedMachine
r.in.gdal input="NetCDF:${DATADIR}/Morlighem_2017/BedMachineGreenland-v5.nc:mask" output=mask_0
g.region raster=mask_0 -pa
r.mapcalc "mask = if((mask_0 > 1) & (mask_0 < 4), mask_0, null())"

r.in.gdal input="NetCDF:${DATADIR}/Morlighem_2017/BedMachineGreenland-v5.nc:thickness" output=thickness

r.mapcalc "ocean = if(mask_0 == 0)"
r.to.vect input=ocean output=ocean type=area

# find largest clump (main ice)
r.clump input=mask output=clumps --o
main_clump=$(r.stats -c -n clumps sort=desc | head -n1 | cut -d" " -f1)

# set main clump to 1, peripheral is 2, shelves ar 3
r.mapcalc "mask = if(clumps == ${main_clump}, 1, mask)" --overwrite

r.mapcalc "m_all = if(mask)"
r.mapcalc "m_main = if(mask == 1, 1, null())"
r.mapcalc "m_peripheral = if(mask == 2, 1, null())"
r.mapcalc "m_shelf = if(mask == 3, 1, null())"
#+END_SRC


*** Citterio & AhlstrÃ¸m 2013

#+BEGIN_SRC bash :exports both :results verbatim
g.mapset -c citterio_2013

# doesn't import properly to GRASS (does to QGIS)
# v.import input=${DATADIR}/Citterio_2013/PROMICE_250_2019-12-04_EPSG4326/PROMICE_250_2019-12-04.shp output=mask

mkdir tmp
ogr2ogr -s_srs EPSG:3413 -t_srs EPSG:3413 ./tmp/citterio_2013.gpkg ${DATADIR}/Citterio_2013/PROMICE_3413/
v.in.ogr input=./tmp/citterio_2013.gpkg output=mask
g.region vector=mask res=100 -pa

# v.db.select map=mask|head
# GIC is character but should be numbers
v.db.addcolumn map=mask columns="GICn INT"
db.execute sql='UPDATE mask SET GICn = CAST(GIC AS numeric)'

v.to.rast input=mask output=mask use=attr attribute_column=GICn
# v.out.ogr input=mask output=./dat/citterio_2013.gpkg

r.mapcalc "m_all = if(mask)"
r.mapcalc "m_GIC0 = if(mask == 0, 1, null())"
r.mapcalc "m_GIC1 = if(mask == 1, 1, null())"
r.mapcalc "m_GIC2 = if(mask == 2, 1, null())"
#+END_SRC

*** RACMO

#+BEGIN_SRC bash :exports both :results verbatim
g.mapset -c RACMO

FILE=${DATADIR}/RACMO/freshwater/Icemask_Topo_Iceclasses_lon_lat_average_1km.nc 
x0=$(ncdump -v x ${FILE} | grep "^ x =" | cut -d" " -f4 | cut -d, -f1)
x1=$(ncdump -v x ${FILE} | tail -n2 | head -n1 | tr ',' '\n' | tail -n1 | cut -d" " -f2)
y0=$(ncdump -v y ${FILE} | grep "^ y =" | cut -d" " -f4 | cut -d, -f1)
y1=$(ncdump -v y ${FILE} | tail -n2 | head -n1 | tr ',' '\n' | tail -n1 | cut -d" " -f2)
g.region w=$x0 e=$x1 s=$y0 n=$y1 res=1000 -p
g.region s=s-500 n=n+500 e=e+500 w=w-500 -p
g.region save=RACMO

r.in.gdal -o input="NetCDF:${FILE}:Promicemask" output=mask
r.region -c map=mask

r.mapcalc "m_all = if(mask >= 1, 1, null())"
r.mapcalc "m_main = if(mask == 3, 1, null())"
r.mapcalc "m_attached = if(mask == 2, 1, null())"
r.mapcalc "m_peripheral = if(mask == 1, 1, null())"
#+END_SRC

*** MAR

MAR NetCDF files don't contain projection information that can be used by GRASS. So I find the bottom, top, left, and right edges by...

+ longitude where lat is max,
+ longitude where lat is min
+ latitude where lon is max
+ latitude where lon is min

Then pass those four through ~m.proj~ to get the x,y bounds of the region in GRASS

#+BEGIN_SRC jupyter-python
import numpy as np
import xarray as xr

ds = xr.open_dataset("/home/kdm/data/MAR/3.13-freshwater/MARv3.13-daily-ERA5-2000.nc")

lon = ds['LON'].values.flatten()
lat = ds['LAT'].values.flatten()

lonmax_idx = np.argmax(lon)
lonmin_idx = np.argmin(lon)
latmax_idx = np.argmax(lat)
latmin_idx = np.argmin(lat)

R = lon[lonmax_idx],lat[lonmax_idx]
L = lon[lonmin_idx],lat[lonmin_idx]
T = lon[latmax_idx],lat[latmax_idx]
B = lon[latmin_idx],lat[latmin_idx]

# bounds
print(pd.DataFrame(index=['T','B','L','R'], columns=['lon','lat'], data=np.vstack((T,B,L,R))))
#+END_SRC

#+RESULTS:
:          lon        lat
: T -45.039822  83.948792
: B -30.694536  58.800426
: L -89.264137  81.557274
: R   7.516274  80.071167

#+BEGIN_SRC bash :results verbatim
g.mapset -c MAR

T=-45.039822,83.948792
B=-30.694536,58.800426
L=-89.264137,81.557274
R=7.516274,80.071167

Txy=$(m.proj -i coordinates=$T)
Bxy=$(m.proj -i coordinates=$B)
Lxy=$(m.proj -i coordinates=$L)
Rxy=$(m.proj -i coordinates=$R)
echo $Txy $Bxy $Lxy $Rxy

N=$(echo ${Txy} | cut -d"|" -f2)
S=$(echo ${Bxy} | cut -d"|" -f2)
E=$(echo ${Rxy} | cut -d"|" -f1)
W=$(echo ${Lxy} | cut -d"|" -f1)

g.region e=$E w=$W s=$S n=$N -pl res=1000
g.region w=w-500 e=e+500 n=n+500 s=s-500 res=1000 -p
g.region save=MAR

r.in.gdal -o input=NetCDF:${DATADIR}/MAR/3.13-freshwater/MARv3.13-daily-ERA5-2000.nc:MSK output=mask
r.region -c map=mask

# find largest clump (main ice)
r.mapcalc "MASK = if(mask == 2)"
r.clump input=mask output=clumps --o
main_clump=$(r.stats -c -n clumps sort=desc | head -n1 | cut -d" " -f1)
# set main clump to 1, peripheral is 2
r.mapcalc "mask = if(clumps == ${main_clump}, 1, mask)" --overwrite
r.mask -r

r.mapcalc "m_all = if(mask)"
r.mapcalc "m_main = if(mask == 1, 1, null())"
r.mapcalc "m_peripheral = if(mask == 2, 1, null())"
#+END_SRC

*** ESA CCI Landcover

+ citet:harper_2023

#+BEGIN_SRC bash :exports both :results verbatim
g.mapset -c harper_2023
g.region raster=mask@BedMachine -pa
r.import input=${DATADIR}/Harper_2023/product/ESACCI-LC-L4-LCCS-Map-300m-P1Y-2015-v2.0.7.tif output=mask_0 extent=region
g.region raster=mask_0 -pa

# find largest clump (main ice), excluding Canda # exclude Canada
r.mapcalc "canada = if(mask_0@BedMachine == 4, 1, null())"
r.grow input=canada output=canada_grow radius=100
r.mapcalc "mask = if((mask_0 == 220) & isnull(canada_grow), 1, null())"
r.clump input=mask output=clumps --o
main_clump=$(r.stats -c -n clumps sort=desc | head -n1 | cut -d" " -f1)

# set main clump to 1, peripheral is 2
r.mapcalc "mask = if(clumps == ${main_clump}, 1, 2)" --overwrite

r.mapcalc "m_all = if(mask)"
r.mapcalc "m_main = if(mask == 1, 1, null())"
r.mapcalc "m_peripheral = if(mask == 2, 1, null())"
#+END_SRC

*** GIMP

+ NSIDC 0714 v001

#+BEGIN_SRC bash :exports both :results verbatim
g.mapset -c GIMP
r.in.gdal input=${DATADIR}/NSIDC/NSIDC-0714.001/2013.03.26/GimpIceMask_90m_2015_v1.2.tif output=mask_0
r.colors -r map=mask_0
g.region raster=mask_0 -pa

# find largest clump (main ice), excluding Canda # exclude Canada
r.mapcalc "mask = if((mask_0 == 1), 1, null())"
r.clump input=mask output=clumps --o
main_clump=$(r.stats -c -n clumps sort=desc | head -n1 | cut -d" " -f1)

# set main clump to 1, peripheral is 2
r.mapcalc "mask = if(clumps == ${main_clump}, 1, 2)" --overwrite

r.mapcalc "m_all = if(mask)"
r.mapcalc "m_main = if(mask == 1, 1, null())"
r.mapcalc "m_peripheral = if(mask == 2, 1, null())"
#+END_SRC

** Places

#+BEGIN_SRC bash :exports both :results verbatim
g.mapset PERMANENT

v.import output=places input="${DATADIR}/QGreenland_v1.0.1/Places/Community map (crowd-sourced)/Populated places/hotosm_populated_places.gpkg"
v.db.select map=places | head | column -s"|" -t
v.db.select map=places where='population > 500'

# v.import output=places input="${DATADIR}/QGreenland_v1.0.1/Places/Towns and settlements/populated_places.gpkg"
# v.db.select map=places | head -n2

# v.import output=places input="${DATADIR}/QGreenland_v1.0.1/Places/Place names database/comprehensive_places.gpkg"
# v.db.select map=places | head -n2

v.label map=places column=name labels=lname size=7500 where="population > 100" bgcolor=white
d.labels lname

#+END_SRC


** Overlap

#+BEGIN_SRC bash :exports both :results verbatim
grass ./G_GL/PERMANENT
g.mapset -c overlap

g.region raster=mask@BedMachine res=100 -pa

g.list type=raster pattern=m_* mapset=* -m |cat

r.mapcalc << EOF
 overlap = if(isnull(m_main@BedMachine), 0, 1) \
  + if(isnull(m_GIC0@citterio_2013), 0, 1) \
  + if(isnull(m_main@MAR), 0, 1) \
  + if(isnull(m_main@RACMO), 0, 1) \
  + if(isnull(m_main@harper_2023), 0, 1) \
  + if(isnull(m_main@GIMP), 0, 1)
EOF

r.null map=overlap setnull=0
r.colors map=overlap color=viridis

d.mon wx0
d.erase
d.vect ocean@BedMachine fill_color=none legend_label="Coast"
d.rast overlap
d.legend overlap
d.vect RGI@RGI fill_color=none color=red legend_label="RGI 5 (Greenland)"
d.labels lname
d.vect places icon=basic/circle size=10 color=black fill_color=black legend_label='Populated region' where='population > 100'
d.barscale length=50 units=kilometers at=3,97
d.legend.vect -b at=10,20 fontsize=16 border_color=none
#+END_SRC

Example:

#+CAPTION: Subset of West Greenland coast showing how many (of 7) masks overlap within a given region. This example figure highlights the inconsistencies between various products, making intercomparison challenging.

[[file:./fig/overlap_Qaanaaq.png]]


** Sets

*** Not in

#+begin_src bash :exports both :results verbatim
g.mapset -c diff
g.region raster=mask@BedMachine res=1000 -pa

rm -f sets_notin_GL.csv

# rasters=$(g.list -m type=raster mapset=* pattern="m_*")
# RGI first
rasters="m_RGI@RGI $(g.list -m type=raster mapset=* pattern="m_*" | tr ' ' '\n' | grep -v RGI)"

for r0 in $rasters; do
  for r1 in $rasters; do
    r.mapcalc --quiet "tmp = if(${r0} & isnull(${r1}), 1, null())" --overwrite
    non_null_cells=$(r.univar --quiet map=tmp nprocs=8 -t|tail -n1|cut -d"|" -f1)
    echo "${r0},${r1},${non_null_cells}" | tee -a sets_notin_GL.csv
  done
done
#+end_src


#+name: fig:notin
#+begin_src jupyter-python :exports both
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

sets = pd.read_csv('sets_notin_GL.csv', names=['x','y','area'])

df = pd.DataFrame()
for o in sets['x'].unique():
    for b in sets['y'].unique():
        area = sets[(sets['x'] == o) & (sets['y'] == b)].area.values
        df.loc[o,b] = area[0]

# print(sets)
df = df * 1000 * 1000 * 1E-6 # convert from grid cells (1000 x 1000 m) to km^2
df.columns = [_[2:] for _ in df.columns]
df.index = [_[2:] for _ in df.index]
df.to_csv('./dat/sets_notin_GL.csv')

d10 = np.log10(df.replace(0,1)).replace(0.1,0)

fig, ax = plt.subplots(figsize=(10,7))
hm = sns.heatmap(d10,
                 mask = df.isnull(),
                 annot = True,
                 ax = ax, 
                 cbar_kws={'label': 'X $\\cap$ Y\' [log$_{10}$ km$^2$]'})
hm.xaxis.tick_top()  # Move x-axis labels to top
hm.set_xticklabels(hm.get_xticklabels(), rotation=90, ha='center')
hm.figure.savefig('./fig/set_notin_GL.png', bbox_inches='tight')
#+end_src
#+CAPTION: Summary of different mask products and their respective ârelative complementâ (X outside Y) between products. Graphic should be interpreted as X outside Y. For example looking at only the top left 2x2 region, âRGI@RGIâ has 10^4.9 = ~80,000 km^2 of ice outside of âGIC0@citterio_2013â, and Citterio 2013 GIC0 has 10^6.2 km^2 outside of RGI. Black 0 indicates product X contained entirely inside product Y. Here âallâ is the entire mask, âmainâ is the main ice, âperipheralâ is unconnected ice, and other labels (e.g. GICn) are specific to and documented elsewhere per those data products.

#+RESULTS: fig:notin
[[file:./figs_tmp/ba2d8b60d543ac0dd5147b475c01688bc653fe47.png]]



** Union
#+begin_src bash :exports both :results verbatim
g.mapset -c diff
g.region raster=mask@BedMachine res=1000 -pa

rm -f sets_union_GL.csv

# put RGI first
rasters="m_RGI@RGI $(g.list -m type=raster mapset=* pattern="m_*" | tr ' ' '\n' | grep -v RGI)"
for r0 in $rasters; do
  for r1 in $rasters; do
    r.mapcalc --quiet "tmp = if(${r0} & ${r1}, 1, null())" --overwrite
    non_null_cells=$(r.univar --quiet map=tmp nprocs=8 -t|tail -n1|cut -d"|" -f1)
    echo "${r0},${r1},${non_null_cells}" | tee -a sets_union_GL.csv
  done
done
#+end_src

#+NAME: union
#+begin_src jupyter-python :exports both
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

sets = pd.read_csv('sets_union_GL.csv', names=['x','y','area'])

df = pd.DataFrame()
for o in sets['x'].unique():
    for b in sets['y'].unique():
        area = sets[(sets['x'] == o) & (sets['y'] == b)].area.values
        df.loc[o,b] = area[0]

# print(sets)
df = df * 1000 * 1000 * 1E-6 # convert from grid cells (1000 x 1000 m) to km^2
df.columns = [_[2:] for _ in df.columns]
df.index = [_[2:] for _ in df.index]
df.to_csv('./dat/sets_union_GL.csv')

for i,c in enumerate(df.columns):
    for j,r in enumerate(df.index):
        if (i > j):
            df.iloc[j,i] = np.nan

d10 = np.log10(df.replace(0,1)).replace(0.1,0)

fig, ax = plt.subplots(figsize=(10,7))
hm = sns.heatmap(d10,
                 annot=True,
                 mask = df.isnull(),
                 cbar_kws={'label': 'X $\\cap$ Y [log$_{10}$ km$^2$]'})
hm.figure.savefig('./fig/set_union_GL.png', bbox_inches='tight')
#+end_src
#+caption: Summary of different mask products and their respective overlap or set intersection between products. For example looking at only the top of the left-most column, âRGI@RGIâ has 10^4.9 = ~8E4 km^2 of ice overlapping itself, and 10^3.5 = ~3E3 km^2 overlapping Citterio 2013 GIC0. Black 0 indicates no overlap. Here âallâ is the entire mask, âmainâ is the main ice, âperipheralâ is unconnected ice, and other labels (e.g. GICn) are specific to and documented elsewhere per those data products.

#+RESULTS: union
[[file:./figs_tmp/3ef797f44b3d475ede8ed5aa3cfec8b883043275.png]]


** Share

#+BEGIN_SRC bash :exports both :results verbatim
g.mapset PERMANENT

mkdir -p share/GL
rasters=$(g.list -m type=raster mapset=* pattern="m_*")
for r in $rasters; do
  g.region raster=${r}
  rn=$(echo ${r} | tr '@' '___')
  r.out.gdal --o -c -m input=${r} output=./share/GL/${rn}.tif format=GTiff type=Int16 createopt="COMPRESS=DEFLATE"
done
r.out.gdal --o -c -m input=overlap@overlap output=./share/GL/overlap.tif format=GTiff type=Int16 createopt="COMPRESS=DEFLATE"

zip -r masks_GL.zip share/GL
#+END_SRC


* Antarctica

** Setup

#+BEGIN_SRC bash :exports both :results verbatim
grass -c EPSG:3031 ./G_AQ
mkdir -p tmp dat
#+END_SRC

** Products

*** RGI 7.0

#+BEGIN_SRC bash :exports both :results verbatim
g.mapset -c RGI

# islands
v.import input=${DATADIR}/RGI/7.0/regional_files/RGI2000-v7.0-G/RGI2000-v7.0-G-19_subantarctic_antarctic_islands.shp output=m_peripheral

# Main continent
ogr2ogr ./tmp/RGI.gpkg -t_srs "EPSG:3031" ${DATADIR}/RGI/7.0/RGI2000-v7.0-o2regions.shp
v.import input=./tmp/RGI.gpkg output=m_main extent=region

v.patch input=m_peripheral,m_main output=m_all

# v.db.select map=RGI|head -n2
g.region vector=m_all res=100 -pa
v.to.rast input=m_peripheral output=m_peripheral use=val val=1
v.to.rast input=m_main output=m_main use=val val=1 where="o1region == 20"
v.to.rast input=m_all output=m_all use=val val=1

g.copy vect=m_peripheral,RGI_Islands
g.copy vect=m_main,RGI_Main

#+END_SRC

*** BedMachine v3

#+BEGIN_SRC bash :exports both :results verbatim
g.mapset -c BedMachine
r.in.gdal input="NetCDF:${DATADIR}/Morlighem_2020/BedMachineAntarctica-v3.nc:mask" output=mask_0
g.region raster=mask_0 -pa
# 0:ocean 1:land 2:ice 3:shelf 4:vostok
r.mapcalc "mask_0 = if(mask_0 == 4, 2, mask_0)" --o # Vostok is ice
r.mapcalc "mask = if(mask_0 >= 2, mask_0, null())"

# Use this later to get ice volume 
r.in.gdal input="NetCDF:${DATADIR}/Morlighem_2020/BedMachineAntarctica-v3.nc:thickness" output=thickness

# find largest clump (main ice)
r.clump input=mask output=clumps --o
main_clump=$(r.stats -c -n clumps sort=desc | head -n1 | cut -d" " -f1)

# set main clump to 1, peripheral is 2, shelves ar 3
r.mapcalc "mask = if(clumps == ${main_clump}, 1, mask)" --overwrite

r.mapcalc "m_all = if(mask)"
r.mapcalc "m_main = if(mask == 1, 1, null())"
r.mapcalc "m_peripheral = if(mask == 2, 1, null())"
r.mapcalc "m_shelf = if(mask == 3, 1, null())"
#+END_SRC

*** ESA CCI Landcover

+ citet:harper_2023

#+BEGIN_SRC bash :exports both :results verbatim
g.mapset -c harper_2023
g.region raster=mask@BedMachine -pa
r.import input=${DATADIR}/Harper_2023/product/ESACCI-LC-L4-LCCS-Map-300m-P1Y-2015-v2.0.7.tif output=mask_0 extent=region
g.region raster=mask_0 -pa

r.mapcalc "mask = if(mask_0 == 220, 1, null())"
r.clump input=mask output=clumps --o
main_clump=$(r.stats -c -n clumps sort=desc | head -n1 | cut -d" " -f1)

# set main clump to 1, peripheral is 2
r.mapcalc "mask = if(clumps == ${main_clump}, 1, 2)" --overwrite

r.mapcalc "m_all = if(mask)"
r.mapcalc "m_main = if(mask == 1, 1, null())"
r.mapcalc "m_peripheral = if(mask == 2, 1, null())"
#+END_SRC


*** IMBIE Rignot

#+BEGIN_SRC bash :exports both :results verbatim
g.mapset -c IMBIE_Rignot

# v.import input=${DATADIR}/IMBIE/Rignot/ANT_Basins_IMBIE2_v1.6.shp  output=Rignot extent=region
# g.region raster=mask_0 -pa

# Antarctica
ogr2ogr ./tmp/Rignot_E_AQ.gpkg -t_srs "EPSG:3031" ${DATADIR}/IMBIE/Rignot/ANT_Basins_IMBIE2_v1.6.shp
v.import input=./tmp/Rignot_E_AQ.gpkg output=Rignot
g.region vector=Rignot res=100 -pa

v.to.rast input=Rignot output=mask use=val val=1

# find largest clump (main ice)
r.clump input=mask output=clumps --o
main_clump=$(r.stats -c -n clumps sort=desc | head -n1 | cut -d" " -f1)

# set main clump to 1, peripheral is 2, shelves ar 3
r.mapcalc "mask = if(clumps == ${main_clump}, 1, 2)" --overwrite

r.mapcalc "m_all = if(mask)"
r.mapcalc "m_main = if(mask == 1, 1, null())"
r.mapcalc "m_peripheral = if(mask == 2, 1, null())"
#+END_SRC

*** Greene 2022 (use year 2020)

#+BEGIN_SRC bash :exports both :results verbatim
g.mapset -c Greene_2022

cat ${DATADIR}/Greene_2022/data/coastline_data/antarctic_coastline_2020.2.txt \
     | grep -v '^[#|\"]' \
     | v.in.lines input=- output=line sep=,

g.region vector=line res=100

v.edit tool=chtype map=line cats=1-100000000
v.centroids input=line output=area

v.to.rast input=area output=mask use=val val=1

# find largest clump (main ice)
r.clump input=mask output=clumps --o
main_clump=$(r.stats -c -n clumps sort=desc | head -n1 | cut -d" " -f1)

# set main clump to 1, peripheral is 2, shelves ar 3
r.mapcalc "mask = if(clumps == ${main_clump}, 1, 2)" --overwrite

r.mapcalc "m_all = if(mask)"
r.mapcalc "m_main = if(mask == 1, 1, null())"
r.mapcalc "m_peripheral = if(mask == 2, 1, null())"
#+END_SRC

*** Measures Antarctic boundaries (NSDIC 0709)

#+BEGIN_SRC bash :exports both :results verbatim
g.mapset -c NSIDC_0709

v.import input=${DATADIR}/NSIDC/NSIDC-0709.002/2008.01.01/Coastline_Antarctica_v02.shp output=coastline

v.import input=${DATADIR}/NSIDC/NSIDC-0709.002/1992.02.07/IceShelf_Antarctica_v02.shp output=shelf
v.import # input=${DATADIR}/NSIDC/NSIDC-0709.002/1992.02.07/IceBoundaries_Antarctica_v02.shp output=boundaries

g.region vector=coastline,shelf,boundaries res=100

v.to.rast input=coastline output=m_all use=val val=1
v.to.rast input=shelf output=m_shelf use=val val=1

r.mapcalc "tmp = if(m_all & isnull(m_shelf), 1, null())"
r.clump input=tmp output=clumps --o
main_clump=$(r.stats -c -n clumps sort=desc | head -n1 | cut -d" " -f1)

# set main clump to 1, peripheral is 2, shelves ar 3
r.mapcalc "mask = if(clumps == ${main_clump}, 1, 2)" --overwrite

r.mapcalc "m_main = if(mask == 1, 1, null())"
r.mapcalc "m_peripheral = if(mask == 2, 1, null())"
#+END_SRC

Labeling

#+BEGIN_SRC bash :exports both :results verbatim
d.vect coastline
d.vect shelf fill_color=blue

v.db.select map=boundaries|head
v.db.select map=boundaries column=TYPE| sort | uniq # FL(oating), GR(ounded), IS(land)
v.label map=boundaries column=NAME labels=lname size=7500 \
    where="(NAME != \"Islands\")
    AND (TYPE == 'FL')
    AND (NAME not like '%_1')
    AND (NAME not like '%_2')
    AND (NAME not like '%_3')
    AND (NAME not like '%_4')
    AND (NAME not like '%_5')
    AND (NAME not like '%_6')
    AND (NAME not like '%_7')"
d.labels lname
#+END_SRC

** Overlap

#+BEGIN_SRC bash :exports both :results verbatim
# grass ./G_GL/PERMANENT
g.mapset -c overlap

g.region raster=mask@BedMachine res=1000 -pa

g.list type=raster pattern=m_* mapset=* -m |cat

r.mapcalc << EOF
 overlap = if(isnull(m_main@BedMachine), 0, 1) \
  + if(isnull(m_main@harper_2023), 0, 1) \
  + if(isnull(m_main@IMBIE_Rignot), 0, 1) \
  + if(isnull(m_main@Greene_2022), 0, 1) \
  + if(isnull(m_main@NSIDC_0709), 0, 1)
EOF

r.colors map=overlap color=viridis
r.null map=overlap setnull=0

v.label map=boundaries@NSIDC_0709 column=NAME labels=lname size=15000 bgcolor=white \
    where="(NAME != \"Islands\")
    AND (TYPE == 'FL')
    AND (NAME not like '%_)')
    AND (NAME not like '%_1')
    AND (NAME not like '%_2')
    AND (NAME not like '%_3')
    AND (NAME not like '%_4')
    AND (NAME not like '%_5')
    AND (NAME not like '%_6')
    AND (NAME not like '%_7')"

d.mon wx0
d.erase
d.rast overlap
d.legend overlap
d.vect m_peripheral@RGI fill_color=none color=red legend_label="RGI 19 (Island)"
d.labels lname
d.barscale length=100 units=kilometers at=3,97
d.legend.vect -b at=10,10 fontsize=16 border_color=none

#+END_SRC

Example:

#+CAPTION: Subset of West Antarctica including Pine Island Bay and ice shelf showing how many masks overlap within a given region. This example figure highlights the inconsistencies between various products, making intercomparison challenging. The six products include BedMachine, CCI (Harper 2023), IMBIE Rignot, Greene (2022), NSIDC 0709, and RGI peripheral islands (region 19, thin red outline).

[[file:./fig/overlap_PIG.png]]

** TODO Sets

*** Not in

#+begin_src bash :exports both :results verbatim
g.mapset -c diff
g.region raster=mask@BedMachine res=1000 -pa

rm -f sets_notin_AQ.csv

# rasters=$(g.list -m type=raster mapset=* pattern="m_*")
# RGI first
rasters="m_peripheral@RGI $(g.list -m type=raster mapset=* pattern="m_*" | tr ' ' '\n' | grep -v RGI)"

for r0 in $rasters; do
  for r1 in $rasters; do
    r.mapcalc --quiet "tmp = if(${r0} & isnull(${r1}), 1, null())" --overwrite
    non_null_cells=$(r.univar --quiet map=tmp nprocs=8 -t|tail -n1|cut -d"|" -f1)
    echo "${r0},${r1},${non_null_cells}" | tee -a sets_notin_AQ.csv
  done
done
#+end_src


#+name: fig:notin_AQ
#+begin_src jupyter-python :exports both
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

sets = pd.read_csv('sets_notin_AQ.csv', names=['x','y','area'])

df = pd.DataFrame()
for o in sets['x'].unique():
    for b in sets['y'].unique():
        area = sets[(sets['x'] == o) & (sets['y'] == b)].area.values
        df.loc[o,b] = area[0]

# print(sets)
df = df * 1000 * 1000 * 1E-6 # convert from grid cells (1000 x 1000 m) to km^2
df.columns = [_[2:] for _ in df.columns]
df.index = [_[2:] for _ in df.index]
df.to_csv('./dat/sets_notin_AQ.csv')

d10 = np.log10(df.replace(0,1)).replace(0.1,0)

fig, ax = plt.subplots(figsize=(8,6))
hm = sns.heatmap(d10,
                 mask = df.isnull(),
                 annot = True,
                 ax = ax, 
                 cbar_kws={'label': 'X $\\cap$ Y\' [log$_{10}$ km$^2$]'})
hm.xaxis.tick_top()  # Move x-axis labels to top
hm.set_xticklabels(hm.get_xticklabels(), rotation=90, ha='center')
hm.figure.savefig('./fig/set_notin_AQ.png', bbox_inches='tight')
#+end_src

#+CAPTION: Summary of different mask products and their respective ârelative complementâ (X outside Y) between products. Graphic should be interpreted as X outside Y. For example looking at only the top left 2x2 region, âRGI@RGIâ has 10^3.9 = ~8,000 km^2 of ice outside of "all@BedMachine", and BedMachine has 10^7.1 km^2 outside of RGI. Black 0 indicates product X contained entirely inside product Y. Here "all" is the entire mask, "main" is the main ice, "peripheral" is unconnected ice, and other labels are specific to and documented elsewhere per those data products.

#+RESULTS: fig:notin_AQ
[[file:./figs_tmp/ac62a7b720938bb7a910255655edda56d2298093.png]]


*** Union
#+begin_src bash :exports both :results verbatim
g.mapset -c diff
g.region raster=mask@BedMachine res=1000 -pa

rm -f sets_union_AQ.csv

# put RGI first
rasters="m_peripheral@RGI $(g.list -m type=raster mapset=* pattern="m_*" | tr ' ' '\n' | grep -v RGI)"
for r0 in $rasters; do
  for r1 in $rasters; do
    r.mapcalc --quiet "tmp = if(${r0} & ${r1}, 1, null())" --overwrite
    non_null_cells=$(r.univar --quiet map=tmp nprocs=8 -t|tail -n1|cut -d"|" -f1)
    echo "${r0},${r1},${non_null_cells}" | tee -a sets_union_AQ.csv
  done
done
#+end_src

#+NAME: fig:union_AQ
#+begin_src jupyter-python :exports both
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

sets = pd.read_csv('sets_union_AQ.csv', names=['x','y','area'])

df = pd.DataFrame()
for o in sets['x'].unique():
    for b in sets['y'].unique():
        area = sets[(sets['x'] == o) & (sets['y'] == b)].area.values
        df.loc[o,b] = area[0]

# print(sets)
df = df * 1000 * 1000 * 1E-6 # convert from grid cells (1000 x 1000 m) to km^2
df.columns = [_[2:] for _ in df.columns]
df.index = [_[2:] for _ in df.index]
df.to_csv('dat/sets_union_AQ.csv')

for i,c in enumerate(df.columns):
    for j,r in enumerate(df.index):
        if (i > j):
            df.iloc[j,i] = np.nan

d10 = np.log10(df.replace(0,1)).replace(0.1,0)

fig, ax = plt.subplots(figsize=(8,6))
hm = sns.heatmap(d10,
                 annot=True,
                 mask = df.isnull(),
                 cbar_kws={'label': 'X $\\cap$ Y [log$_{10}$ km$^2$]'})
hm.figure.savefig('./fig/set_union_AQ.png', bbox_inches='tight')
#+end_src

#+caption: Summary of different mask products and their respective overlap or set intersection between products. For example looking at only the top of the left-most column, "RGI@RGI" has 10^5.1 = ~125,000 km^2 of ice overlapping itself, and 10^3.1 = 1259 km^2 overlapping BedMachine main ice. Black 0 indicates no overlap. Here "allâ is the entire mask, "mainâ is the main ice, "peripheralâ is unconnected ice, and other labels (e.g. GICn) are specific to and documented elsewhere per those data products.

#+RESULTS: fig:union_AQ
[[file:./figs_tmp/5bde42b8c9e1fac3d07904997efb93f985e591a9.png]]

** Share

#+BEGIN_SRC bash :exports both :results verbatim
g.mapset PERMANENT

mkdir -p share/AQ
rasters=$(g.list -m type=raster mapset=* pattern="m_*")
for r in $rasters; do
  g.region raster=${r}
  rn=$(echo ${r} | tr '@' '___')
  r.out.gdal --o -c -m input=${r} output=./share/AQ/${rn}.tif format=GTiff type=Int16 createopt="COMPRESS=DEFLATE"
done
r.out.gdal --o -c -m input=overlap@overlap output=./share/AQ/overlap.tif format=GTiff type=Int16 createopt="COMPRESS=DEFLATE"

zip -r masks_AQ.zip share/AQ
#+END_SRC


